#!/usr/bin/env python3
"""
Script de test pour v√©rifier la configuration IB Gateway
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_ibkr_gateway():
    """Test complet de la configuration IB Gateway"""
    
    print("üöÄ Test de la configuration IB Gateway")
    print("=" * 50)
    
    # 1. Test du serveur
    print("\n1. Test du serveur Option Screener...")
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ Serveur d√©marr√©")
        else:
            print("‚ùå Probl√®me serveur")
            return
    except Exception as e:
        print(f"‚ùå Serveur non accessible: {e}")
        return
    
    # 2. Test status IBKR
    print("\n2. V√©rification du status IBKR...")
    try:
        response = requests.get(f"{BASE_URL}/api/ibkr/status")
        status = response.json()
        
        print(f"   IBKR activ√©: {status['ibkr_enabled']}")
        print(f"   Utilisation principale: {status['use_ibkr_primary']}")
        print(f"   Port configur√©: {status['configuration']['port']}")
        print(f"   Connect√©: {status['connection_status']['connected']}")
        
        if not status['connection_status']['connected']:
            print("‚ö†Ô∏è  IBKR non connect√©, tentative de connexion...")
            
            # 3. Tentative de connexion
            conn_response = requests.post(f"{BASE_URL}/api/ibkr/connect")
            if conn_response.status_code == 200:
                print("‚úÖ Connexion IBKR r√©ussie")
            else:
                print(f"‚ùå √âchec connexion: {conn_response.json()}")
                return
        else:
            print("‚úÖ IBKR d√©j√† connect√©")
            
    except Exception as e:
        print(f"‚ùå Erreur status IBKR: {e}")
        return
    
    # 4. Test des donn√©es
    print("\n3. Test de r√©cup√©ration des donn√©es...")
    test_tickers = ["AAPL", "TSLA", "MSFT"]
    
    for ticker in test_tickers:
        print(f"\n   Test {ticker}:")
        try:
            # Test IBKR direct
            response = requests.get(f"{BASE_URL}/api/ibkr/test/{ticker}")
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ {ticker}: {result['data_retrieval']['contracts_found']} contrats en {result['data_retrieval']['retrieval_time_seconds']}s")
                
                # Test analyse compl√®te
                analysis_response = requests.get(f"{BASE_URL}/api/analyze/{ticker}")
                if analysis_response.status_code == 200:
                    analysis = analysis_response.json()
                    data_source = analysis['dataQuality']['data_source']
                    score = analysis['dataQuality']['data_quality_score']
                    contracts = len(analysis['unusualContracts'])
                    print(f"   ‚úÖ Analyse: {contracts} contrats inhabituels, source: {data_source}, qualit√©: {score}/100")
                else:
                    print(f"   ‚ö†Ô∏è  Analyse √©chou√©e pour {ticker}")
                    
            else:
                print(f"   ‚ùå Test IBKR √©chou√© pour {ticker}")
                
        except Exception as e:
            print(f"   ‚ùå Erreur {ticker}: {e}")
        
        time.sleep(1)  # Pause entre les tests
    
    # 5. R√©sum√©
    print("\n" + "=" * 50)
    print("üéØ Test termin√©")
    print("\nPour utiliser votre Option Screener avec IB Gateway:")
    print("1. Gardez IB Gateway ouvert et connect√©")
    print("2. Utilisez: http://localhost:8000/api/analyze/TICKER")
    print("3. V√©rifiez que 'data_source': 'ibkr' dans les r√©ponses")
    print("\nüìä Votre Option Screener est pr√™t avec des donn√©es IBKR professionnelles!")

if __name__ == "__main__":
    test_ibkr_gateway()





